//get, list = read
//create, delete, update = write
//request.resource.data = incoming document
//resource.data = existing document
//request.auth.uid = user id who invoked
//request.auth.token.role = custom claim roles
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function userIsAdmin(){
      return request.auth.token.role == 'ADMINISTRATOR';
    }

    function userIsEducator(){
      return request.auth.token.role == 'EDUCATOR';
    }

    match /constants/{constantID} {
      allow read;
      allow write: if userIsAdmin();
    }

    match /allies/{allyID} {
      allow read;
      allow write: if userIsAdmin();
    }

    match /password_resets/{resetID} {
      allow create;
    }

    match /requests/{requestID} {
      function requestIsValid(){
        return  request.resource.data.state == 'PENDING' ||
                request.resource.data.state == 'APPROVED' ||
                request.resource.data.state == 'DENIED';
      }

      allow read;
      allow update: if userIsAdmin() && requestIsValid();
      allow create: if requestIsValid();
    }

    match /users/{userID} {
      function userIsThemselves(){
        return request.auth.uid == userID && resource != null && request.auth.uid == resource.data.id;
      }

      allow read;
      allow write: if userIsAdmin() || userIsThemselves();
    }

    match /implementables/{implementableID} {

      function implementableIsValid(){
        return  request.resource.data.tag == 'MODULE' ||
                request.resource.data.tag == 'EVENT';
      }
      
      allow read;
      allow create, update: if userIsAdmin() && implementableIsValid();
      allow delete: if userIsAdmin();

      match /files/{fileID} {
        allow read;
        allow create, delete: if userIsAdmin();
      }

      match /questions/{questionID} {

        function questionIsValid(){
          return  request.resource.data.options['VERY_LOW'] is string &&
                  request.resource.data.options['LOW'] is string &&
                  request.resource.data.options['AVERAGE'] is string &&
                  request.resource.data.options['HIGH'] is string &&
                  request.resource.data.options['VERY_HIGH'] is string
        }

        allow read: if userIsAdmin() || userIsEducator();
        allow create, update: if userIsAdmin() && questionIsValid();
        allow delete: if userIsAdmin();
      }

      match /sections/{sectionID} {
        
        allow read;
        allow create, update: if userIsAdmin();
        allow delete: if userIsAdmin();
      }
    }

    match /implementations/{implementationID} {

      allow read, create, update: if userIsAdmin() || userIsEducator();

      match /evidence/{evidenceID} {
        allow create, read, delete: if userIsAdmin() || userIsEducator();
      }

      match /answers/{answerID} {
        function answerIsValid(){
          return  request.resource.data.score == 'UNKNOWN' ||
                  request.resource.data.score == 'VERY_LOW' ||
                  request.resource.data.score == 'LOW' || 
                  request.resource.data.score == 'AVERAGE' || 
                  request.resource.data.score == 'HIGH' || 
                  request.resource.data.score == 'VERY_HIGH'; 
        }

        allow read: if userIsAdmin() || userIsEducator();
        allow create, update: if (userIsAdmin() || userIsEducator()) && answerIsValid();
        allow delete: if userIsAdmin() || userIsEducator();
      }
    }
  }
}